{
  "version": 3,
  "sources": ["src/app/assessments/assessments.component.ts", "src/app/assessments/assessments.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterLink } from '@angular/router';\r\nimport { ApiService, Assessment, Job } from '../api.service';\r\n\r\n@Component({\r\n  selector: 'app-assessments',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterLink],\r\n  templateUrl: './assessments.component.html',\r\n  styleUrls: ['./assessments.component.css']\r\n})\r\nexport class AssessmentsComponent implements OnInit {\r\n  isGridView = true;\r\n  assessments: Assessment[] = [];\r\n  jobs: Job[] = [];\r\n  loading = false;\r\n  error: string | null = null;\r\n\r\n  constructor(private apiService: ApiService) {}\r\n\r\n  ngOnInit() {\r\n    this.fetchJobs();\r\n    this.fetchAssessments();\r\n  }\r\n\r\n  fetchJobs() {\r\n    this.apiService.getJobs().subscribe({\r\n      next: (jobs) => {\r\n        this.jobs = jobs;\r\n      },\r\n      error: () => {\r\n        this.jobs = ApiService.getFallbackJobs ? ApiService.getFallbackJobs() : [];\r\n      }\r\n    });\r\n  }\r\n\r\n  getJobById(jobId: number): Job | undefined {\r\n    return this.jobs.find(j => j.id === jobId);\r\n  }\r\n\r\n  getJobTitle(jobId: number): string {\r\n    return this.getJobById(jobId)?.title || `Job #${jobId}`;\r\n  }\r\n\r\n  getJobRole(jobId: number): string {\r\n    return this.getJobById(jobId)?.role || '';\r\n  }\r\n\r\n  fetchAssessments() {\r\n    this.loading = true;\r\n    this.apiService.getAssessments().subscribe({\r\n      next: (data) => {\r\n        if (data && data.length > 0) {\r\n          this.assessments = data;\r\n        } else {\r\n          this.assessments = ApiService.getFallbackAssessments();\r\n        }\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        // On error, use fallback data\r\n        this.assessments = ApiService.getFallbackAssessments();\r\n        this.loading = false;\r\n        // Only show error if fallback is also empty\r\n        if (this.assessments.length === 0) {\r\n          this.error = err;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Group assessments by jobId for grid view\r\n  get assessmentsByJob(): { jobId: number, steps: Assessment[] }[] {\r\n    const map = new Map<number, Assessment[]>();\r\n    for (const a of this.assessments) {\r\n      if (!map.has(a.jobId)) map.set(a.jobId, []);\r\n      map.get(a.jobId)!.push(a);\r\n    }\r\n    return Array.from(map.entries()).map(([jobId, steps]) => ({ jobId, steps }));\r\n  }\r\n\r\n  toggleView(isGrid: boolean) {\r\n    this.isGridView = isGrid;\r\n  }\r\n}\r\n", "<div class=\"container mt-4 assessments-bg\">\n  <!-- Top Bar (Heading Menu) -->\n  <div class=\"assessments-floating-container-heading p-4 mb-4\">\n    <div class=\"top-bar d-flex flex-wrap justify-content-between align-items-center mb-3 gap-3\">\n      <h2 class=\"fw-bold mb-0\">Assessments</h2>\n      <div class=\"d-flex gap-2 ms-auto\">\n        <button class=\"btn brand-green-btn\" routerLink=\"/assessments/create-assessment\">Create Assessment</button>\n        <button class=\"btn layout-toggle\" [class.active]=\"isGridView\" (click)=\"toggleView(true)\" title=\"Grid View\">\n          <i class=\"fas fa-th\"></i>\n        </button>\n        <button class=\"btn layout-toggle\" [class.active]=\"!isGridView\" (click)=\"toggleView(false)\" title=\"Table View\">\n          <i class=\"fas fa-list\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Loading/Error States -->\n  <div *ngIf=\"loading\" class=\"text-center my-5\">\n    <div class=\"spinner-border text-primary\" role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"alert alert-danger text-center\">{{ error }}</div>\n\n  <!-- Content Container -->\n  <div class=\"assessments-floating-container\" *ngIf=\"!loading && !error\">\n    <!-- Grid View: Grouped by Job -->\n    <div class=\"row g-4 d-flex align-items-stretch flex-wrap\" *ngIf=\"isGridView\">\n      <div class=\"col-md-4 d-flex\" *ngFor=\"let group of assessmentsByJob\">\n        <div class=\"assessment-card p-3 shadow-sm h-100 w-100 d-flex flex-column\">\n          <div>\n            <div class=\"fw-bold fs-5 mb-1\">{{ getJobTitle(group.jobId) }}</div>\n            <div class=\"mb-2\">\n              <span class=\"badge custom-badge\">Total Steps: {{ group.steps.length }}</span>\n            </div>\n          </div>\n          <div class=\"flex-grow-1 d-flex flex-column justify-content-center\">\n            <ul class=\"list-group list-group-flush mb-2\">\n              <li class=\"list-group-item px-0 py-1\" *ngFor=\"let step of group.steps\">\n                <div class=\"fw-semibold\"> <span class=\"badge bg-secondary ms-2\">Step No : {{ step.stepOrder }}&nbsp;</span>&nbsp;&nbsp;&nbsp;&nbsp;{{ step.stepName }}</div>\n                <div class=\"small text-muted\">Mode: {{ step.mode }} | Passing: {{ step.passingCriteria }}</div>\n              </li>\n            </ul>\n          </div>\n          <div class=\"d-flex gap-2 mt-3 w-100\">\n            <button class=\"btn btn-outline-primary btn-sm flex-fill\">Edit</button>\n            <button class=\"btn btn-outline-danger btn-sm flex-fill\">Delete</button>\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"assessmentsByJob.length === 0\" class=\"text-center text-muted w-100\">No assessments found.</div>\n    </div>\n\n    <!-- Card List View: Grouped by Job -->\n    <div *ngIf=\"!isGridView\" class=\"job-cards-list\">\n      <div class=\"job-card mb-4\" *ngFor=\"let group of assessmentsByJob\">\n        <div class=\"job-card-header d-flex justify-content-between align-items-center\">\n          <div class=\"fw-bold fs-5\">\n            {{ getJobTitle(group.jobId) }}\n            <span *ngIf=\"getJobRole(group.jobId)\">({{ getJobRole(group.jobId) }})</span>\n          </div>\n          <div>\n            <button class=\"btn btn-outline-primary btn-sm me-2\">Edit</button>\n            <button class=\"btn btn-outline-danger btn-sm\">Delete</button>\n          </div>\n        </div>\n        <ul class=\"list-group list-group-flush mt-3\">\n          <li class=\"list-group-item px-0 py-2\" *ngFor=\"let step of group.steps\">\n            <div class=\"fw-semibold\">{{ step.stepName }} <span class=\"badge bg-secondary ms-2\">Order: {{ step.stepOrder }}</span></div>\n            <div class=\"small text-muted\">Mode: {{ step.mode }} | Passing: {{ step.passingCriteria }}</div>\n          </li>\n        </ul>\n      </div>\n      <div *ngIf=\"assessmentsByJob.length === 0\" class=\"text-center text-muted w-100\">No assessments found.</div>\n    </div>\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r0", "error", "\u0275\u0275textInterpolate1", "step_r2", "stepOrder", "stepName", "\u0275\u0275textInterpolate2", "mode", "passingCriteria", "\u0275\u0275template", "AssessmentsComponent_div_14_div_1_div_1_li_10_Template", "getJobTitle", "group_r3", "jobId", "steps", "length", "\u0275\u0275property", "AssessmentsComponent_div_14_div_1_div_1_Template", "AssessmentsComponent_div_14_div_1_div_2_Template", "assessmentsByJob", "getJobRole", "group_r4", "step_r5", "AssessmentsComponent_div_14_div_2_div_1_span_4_Template", "AssessmentsComponent_div_14_div_2_div_1_li_11_Template", "AssessmentsComponent_div_14_div_2_div_1_Template", "AssessmentsComponent_div_14_div_2_div_2_Template", "AssessmentsComponent_div_14_div_1_Template", "AssessmentsComponent_div_14_div_2_Template", "isGridView", "AssessmentsComponent", "apiService", "assessments", "jobs", "loading", "constructor", "ngOnInit", "fetchJobs", "fetchAssessments", "getJobs", "subscribe", "next", "ApiService", "getFallbackJobs", "getJobById", "find", "j", "id", "title", "role", "getAssessments", "data", "getFallbackAssessments", "err", "map", "Map", "a", "has", "set", "get", "push", "Array", "from", "entries", "toggleView", "isGrid", "\u0275\u0275directiveInject", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275element", "AssessmentsComponent_div_12_Template", "AssessmentsComponent_div_13_Template", "AssessmentsComponent_div_14_Template", "\u0275\u0275classProp", "CommonModule", "NgForOf", "NgIf", "RouterLink", "styles"]
}
