{
  "version": 3,
  "sources": ["src/app/jobs/create-job/create-job.component.ts", "src/app/jobs/create-job/create-job.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ApiService, CreateJobRequest, AssessmentTemplate } from '../../api.service';\r\ninterface Job {\r\n  id?: number;\r\n  title: string;\r\n  role: string;\r\n  location: string;\r\n  description: string;\r\n  isActive: boolean;\r\n  salaryMin: number;\r\n  salaryMax: number;\r\n  type: string;\r\n  level: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-create-job',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterLink, FormsModule],\r\n  templateUrl: './create-job.component.html',\r\n  styleUrl: './create-job.component.css'\r\n})\r\nexport class CreateJobComponent implements OnInit {\r\n    job: Job = {\r\n      id: 0,\r\n      title: '',\r\n      role: '',\r\n      location: '',\r\n      description: '',\r\n      isActive: true,\r\n      salaryMin: 0,\r\n      salaryMax: 0,\r\n      type: 'Full-time',\r\n      level: 'Entry-level'\r\n    };\r\n  assessmentTemplates: AssessmentTemplate[] = [];\r\n  filteredAssessmentTemplates: AssessmentTemplate[] = [];\r\n  availableStepNames: string[] = [];\r\n\r\n  loading = false;\r\n  error: string | null = null;\r\n  success = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private apiService: ApiService\r\n  ) { }\r\n\r\n\r\n  onSubmit(form: any) {\r\n    if (form.valid) {\r\n      this.loading = true;\r\n      this.error = null;\r\n      this.success = false;\r\n\r\n      const jobData = {\r\n        title: this.job.title,\r\n        role: this.job.role,\r\n        location: this.job.location,\r\n        description: this.job.description,\r\n        salaryMin: Number(this.job.salaryMin),\r\n        salaryMax: Number(this.job.salaryMax),\r\n        type: this.job.type,\r\n        level: this.job.level,\r\n        isActive: this.job.isActive\r\n      };\r\n\r\n      this.apiService.createJob(jobData).subscribe({\r\n        next: (createdJob) => {\r\n          console.log('Job created successfully:', createdJob);\r\n          this.loading = false;\r\n          this.success = true;\r\n\r\n          // Navigate to jobs page after short delay\r\n          setTimeout(() => {\r\n            this.router.navigate(['/jobs']);\r\n          }, 1500);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error creating job:', error);\r\n          this.error = error;\r\n          this.loading = false;\r\n\r\n          // Fallback to localStorage if API fails\r\n          this.saveToLocalStorage();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  ngOnInit() {\r\n    this.loadAssessmentTemplates();\r\n  }\r\n\r\n  private saveToLocalStorage() {\r\n    try {\r\n      const jobs: Job[] = JSON.parse(localStorage.getItem('jobs') || '[]');\r\n      const newJob: Job = {\r\n        ...this.job,\r\n        id: Date.now(),\r\n        isActive: true,\r\n        salaryMin: Number(this.job.salaryMin),\r\n        salaryMax: Number(this.job.salaryMax)\r\n      };\r\n      jobs.push(newJob);\r\n      localStorage.setItem('jobs', JSON.stringify(jobs));\r\n\r\n      console.log('Job saved to localStorage as fallback');\r\n      this.success = true;\r\n      setTimeout(() => {\r\n        this.router.navigate(['/jobs']);\r\n      }, 10000);\r\n    } catch (err) {\r\n      console.error('Error saving to localStorage:', err);\r\n      this.error = 'Failed to save job. Please try again.';\r\n    }\r\n  }\r\n\r\n  clearError() {\r\n    this.error = null;\r\n  }\r\n  private loadAssessmentTemplates() {\r\n    this.apiService.getAssessmentTemplates().subscribe({\r\n      next: (templates) => {\r\n        this.assessmentTemplates = templates;\r\n        this.filterAssessmentTemplates();\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading assessment templates:', error);\r\n        // Fallback to empty array\r\n        this.assessmentTemplates = [];\r\n        this.filteredAssessmentTemplates = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  onRoleChange() {\r\n    this.filterAssessmentTemplates();\r\n  }\r\n\r\n  private filterAssessmentTemplates() {\r\n    if (!this.job.role || this.job.role.trim() === '') {\r\n      this.filteredAssessmentTemplates = [];\r\n      this.availableStepNames = [];\r\n      return;\r\n    }\r\n\r\n    // Filter templates by role (case-insensitive partial match)\r\n    this.filteredAssessmentTemplates = this.assessmentTemplates.filter(template =>\r\n      template.role.toLowerCase().includes(this.job.role.toLowerCase())\r\n    );\r\n\r\n    // Extract unique step names for the filtered role\r\n    this.availableStepNames = [...new Set(\r\n      this.filteredAssessmentTemplates.map(template => template.stepName)\r\n    )];\r\n  }\r\n}", "<div class=\"create-job-bg d-flex align-items-center justify-content-center min-vh-90 w-100\">\r\n  <div class=\"create-job-card p-5 shadow-lg w-100\">\r\n    <div class=\"text-center mb-4\">\r\n      <div class=\"brand-icon mb-2\">\r\n        <i class=\"fas fa-briefcase\"></i>\r\n      </div>\r\n      <h2 class=\"brand-heading mb-1\">Post a New Job</h2>\r\n      <div class=\"brand-subheading mb-3\">Fill in the details below to post a new job opening</div>\r\n    </div>\r\n    <div *ngIf=\"loading\" class=\"alert alert-info\">\r\n      <i class=\"fas fa-spinner fa-spin me-2\"></i>Posting job...\r\n    </div>\r\n\r\n    <div *ngIf=\"success\" class=\"alert alert-success\">\r\n      <i class=\"fas fa-check-circle me-2\"></i>Job posted successfully! Redirecting...\r\n    </div>\r\n\r\n    <div *ngIf=\"error\" class=\"alert alert-danger\">\r\n      <i class=\"fas fa-exclamation-triangle me-2\"></i>{{ error }}\r\n      <button type=\"button\" class=\"btn-close float-end\" (click)=\"clearError()\"></button>\r\n    </div>\r\n\r\n    <form #createJobForm=\"ngForm\" (ngSubmit)=\"onSubmit(createJobForm)\">\r\n      <div class=\"row g-4\">\r\n        <div class=\"col-md-6\">\r\n          <label for=\"title\" class=\"form-label\">Job Title</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" [(ngModel)]=\"job.title\"\r\n            placeholder=\"@eg-Software Developer\" required>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <label for=\"role\" class=\"form-label\">Job Role</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"role\" name=\"role\" [(ngModel)]=\"job.role\"\r\n            placeholder=\"@eg-Product Manager\" required>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <label for=\"location\" class=\"form-label\">Location</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"location\" name=\"location\" [(ngModel)]=\"job.location\"\r\n            placeholder=\"@eg-Remote\" required>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <label for=\"type\" class=\"form-label\">Employment Type</label>\r\n          <select class=\"form-select\" id=\"type\" name=\"type\" [(ngModel)]=\"job.type\">\r\n            <option>Full-time</option>\r\n            <option>Part-time</option>\r\n            <option>Contract</option>\r\n            <option>Internship</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <label for=\"level\" class=\"form-label\">Seniority Level</label>\r\n          <select class=\"form-select\" id=\"level\" name=\"level\" [(ngModel)]=\"job.level\">\r\n            <option>Entry-level</option>\r\n            <option>Mid</option>\r\n            <option>Senior-level</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <label for=\"salaryMin\" class=\"form-label\">Min Salary</label>\r\n          <input type=\"number\" class=\"form-control\" id=\"salaryMin\" name=\"salaryMin\" [(ngModel)]=\"job.salaryMin\"\r\n            placeholder=\"@eg-1000000\" required>\r\n        </div>\r\n        <div class=\"col-md-3\">\r\n          <label for=\"salaryMax\" class=\"form-label\">Max Salary</label>\r\n          <input type=\"number\" class=\"form-control\" id=\"salaryMax\" name=\"salaryMax\" [(ngModel)]=\"job.salaryMax\"\r\n            placeholder=\"@eg-2000000\" required>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <label for=\"isActive\" class=\"form-label\">Active</label>\r\n          <div class=\"form-check form-switch\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"isActive\" name=\"isActive\" [(ngModel)]=\"job.isActive\">\r\n            <label class=\"form-check-label\" for=\"isActive\">\r\n              <span class=\"badge\" [ngClass]=\"job.isActive ? 'bg-success' : 'bg-secondary'\">\r\n                {{ job.isActive ? 'Active' : 'Inactive' }}\r\n              </span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <!-- Hiring Platforms (static, not bound to Angular) -->\r\n        <div class=\"col-md-6\">\r\n          <label class=\"form-label\">Hiring Platforms</label>\r\n          <div class=\"hiring-platforms-checkbox-group\">\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"platformLinkedIn\">\r\n              <label class=\"form-check-label\" for=\"platformLinkedIn\">LinkedIn</label>\r\n            </div>\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"platformNaukri\">\r\n              <label class=\"form-check-label\" for=\"platformNaukri\">Naukri</label>\r\n            </div>\r\n            <div class=\"form-check\">\r\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"platformOthers\">\r\n              <label class=\"form-check-label\" for=\"platformOthers\">Others</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-12\">\r\n          <label for=\"description\" class=\"form-label\">Job Description</label>\r\n          <textarea class=\"form-control\" id=\"description\" name=\"description\" rows=\"6\" [(ngModel)]=\"job.description\"\r\n            placeholder=\"@eg-This role demands...\" required></textarea>\r\n        </div>\r\n        <div class=\"col-12 d-flex justify-content-between align-items-center mt-4\">\r\n          <a routerLink=\"/jobs\" class=\"btn brand-outline-btn\">Back to Jobs</a>\r\n          <button type=\"submit\" class=\"btn brand-green-btn px-4\" [disabled]=\"!createJobForm.valid\">Post Job</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "clearError", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "error", "CreateJobComponent", "router", "apiService", "job", "id", "title", "role", "location", "description", "isActive", "salaryMin", "salaryMax", "type", "level", "assessmentTemplates", "filteredAssessmentTemplates", "availableStepNames", "loading", "success", "constructor", "onSubmit", "form", "valid", "jobData", "Number", "createJob", "subscribe", "next", "createdJob", "console", "log", "setTimeout", "navigate", "saveToLocalStorage", "ngOnInit", "loadAssessmentTemplates", "jobs", "JSON", "parse", "localStorage", "getItem", "newJob", "__spreadProps", "__spreadValues", "Date", "now", "push", "setItem", "stringify", "err", "getAssessmentTemplates", "templates", "filterAssessmentTemplates", "onRoleChange", "trim", "filter", "template", "toLowerCase", "includes", "Set", "map", "stepName", "\u0275\u0275directiveInject", "Router", "ApiService", "selectors", "decls", "vars", "consts", "rf", "ctx", "\u0275\u0275template", "CreateJobComponent_div_9_Template", "CreateJobComponent_div_10_Template", "CreateJobComponent_div_11_Template", "_r1", "createJobForm_r4", "\u0275\u0275reference", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275property", "\u0275\u0275twoWayProperty", "CommonModule", "NgClass", "NgIf", "RouterLink", "FormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "NgModel", "NgForm", "styles"]
}
